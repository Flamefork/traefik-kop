version: "3"

services:
  redis:
    image: "redis:alpine"
    restart: unless-stopped
    ports:
      - 6380:6379

  helloworld:
    build:
      dockerfile: ./helloworld/Dockerfile
      context: ./
    restart: unless-stopped
    ports:
      - 5555:5555
      - 5566:5566
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hello1.rule=Host(`hello1.local`)"
      - "traefik.http.routers.hello1.service=hello1"
      - "traefik.http.routers.hello1.tls=true"
      - "traefik.http.routers.hello1.tls.certresolver=default"
      - "traefik.http.services.hello1.loadbalancer.server.scheme=http"
      - "traefik.http.services.hello1.loadbalancer.server.port=5555"
      - "traefik.http.routers.hello2.rule=Host(`hello2.local`)"
      - "traefik.http.routers.hello2.service=hello2"
      - "traefik.http.routers.hello2.tls=true"
      - "traefik.http.routers.hello2.tls.certresolver=default"
      - "traefik.http.services.hello2.loadbalancer.server.scheme=http"
      - "traefik.http.services.hello2.loadbalancer.server.port=5566"

  # This service is the same as above except that it does not have a label
  # which explicitly maps the port and so it fails to correctly determine which
  # port to tell traefik to connect to. i.e., both services connect to 5555.
  hellodetect:
    build:
      dockerfile: ./helloworld/Dockerfile
      context: ./
    restart: unless-stopped
    ports:
      - 5577:5555
      - 5588:5566
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hello-detect.rule=Host(`hello-detect.local`)"
      - "traefik.http.routers.hello-detect.service=hello-detect"
      - "traefik.http.routers.hello-detect.tls=true"
      - "traefik.http.routers.hello-detect.tls.certresolver=default"
      - "traefik.http.services.hello-detect.loadbalancer.server.scheme=http"
      - "traefik.http.routers.hello-detect2.rule=Host(`hello-detect2.local`)"
      - "traefik.http.routers.hello-detect2.service=hello-detect2"
      - "traefik.http.routers.hello-detect2.tls=true"
      - "traefik.http.routers.hello-detect2.tls.certresolver=default"
      - "traefik.http.services.hello-detect2.loadbalancer.server.scheme=http"

  nginx:
    image: "nginx:alpine"
    restart: unless-stopped
    ports:
      - 8088:80
    healthcheck:
      test: ["CMD", "curl", "-s", "localhost:80"]
      timeout: 10s
      interval: 2s
      retries: 10
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`nginx.local`)"
      - "traefik.http.routers.nginx.tls=true"
      - "traefik.http.routers.nginx.tls.certresolver=default"
      - "traefik.http.services.nginx.loadbalancer.server.scheme=http"
      - "traefik.http.services.nginx.loadbalancer.server.port=8088"

  pihole:
    image: "pihole/pihole:latest"
    restart: unless-stopped
    ports:
      - 8089:80
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pihole.rule=Host(`pihole.local`)"
      - "traefik.http.routers.pihole.tls=true"
      - "traefik.http.routers.pihole.tls.certresolver=default"
      - "traefik.http.services.pihole.loadbalancer.server.scheme=http"
      - "traefik.http.services.pihole.loadbalancer.server.port=8089"
